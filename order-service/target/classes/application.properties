spring.application.name=order-service
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/order-service
spring.datasource.username=root
spring.datasource.password=root
spring.jpa.hibernate.ddl-auto=update
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
server.port=8081

management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

#Resilience4j Properties
#to be able to see different states of circuit breaker
resilience4j.circuitbreaker.instances.inventory.register-health-indicator=true  
resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10
# we dont want to right away change the state we have to wait till some no of requests failed before changing state so we choose count based
resilience4j.circuitbreaker.instances.inventory.sliding-window-type=COUNT_BASED
resilience4j.circuitbreaker.instances.inventory.sliding-window-size=5
resilience4j.circuitbreaker.instances.inventory.failure-rate-threshold=50
resilience4j.circuitbreaker.instances.inventory.wait-duration-in-open-state=5s
# how many calls to allow in half open state so resilience4j can check communication between order and inventory service
resilience4j.circuitbreaker.instances.inventory.permitted-number-of-calls-in-half-open-state=3
resilience4j.circuitbreaker.instances.inventory.automatic-transition-from-open-to-half-open-enabled=true

#resilience4J timeout properties
#max waiting for 3s if there is slow network call or any issue before terminating the call 
resilience4j.timelimiter.instances.inventory.timeout-duration=3s

#Resilience4J Retry properties
resilience4j.retry.instances.inventory.max-attempts=3
resilience4j.retry.instances.inventory.wait-duration=5s

#Kafka properties
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.template.default-topic=notificationTopic
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.spring.json.type.mapping=event:com.project.orderservice.event.OrderPlacedEvent

